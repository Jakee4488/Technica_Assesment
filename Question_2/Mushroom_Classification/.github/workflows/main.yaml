name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"



  build-and-push-dockerhub-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build, tag, and push image to Docker Hub
        id: build-image
        env:
          DOCKERHUB_REPOSITORY: ${{ secrets.DOCKERHUB_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $DOCKERHUB_REPOSITORY:$IMAGE_TAG .
          docker push $DOCKERHUB_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$DOCKERHUB_REPOSITORY:$IMAGE_TAG"
          
  Continuous-Deployment:
    needs: build-and-push-dockerhub-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure Container Registry Login
        run: az acr login --name ${{ secrets.AZURE_ACR_NAME }}

      - name: Pull latest images from Docker Hub
        run: |
          docker pull ${{ secrets.DOCKERHUB_REPOSITORY }}:latest

      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 --name=mlops ${{ secrets.DOCKERHUB_REPOSITORY }}:latest

      - name: Clean previous images and containers
        run: |
          docker system prune -f
